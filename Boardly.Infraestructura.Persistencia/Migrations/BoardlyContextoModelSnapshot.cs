// <auto-generated />
using System;
using Boardly.Infraestructura.Persistencia.Contexto;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Boardly.Infraestructura.Persistencia.Migrations
{
    [DbContext(typeof(BoardlyContexto))]
    partial class BoardlyContextoModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "actividad_prioridad", new[] { "baja", "media", "alta" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "estado_actividad", new[] { "pendiente", "proceso", "revision", "completado" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "estado_empresa", new[] { "activo", "inactivo" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "estado_proyecto", new[] { "en_proceso", "finalizado" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "estado_tarea", new[] { "pendiente", "en_proceso", "en_revision", "finalizada" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "estado_usuario", new[] { "activo", "inactivo" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Boardly.Dominio.Modelos.Actividad", b =>
                {
                    b.Property<Guid>("ActividadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PkActividadId");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaFinalizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Orden")
                        .HasColumnType("integer");

                    b.Property<string>("Prioridad")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("ActividadId")
                        .HasName("PKActividadId");

                    b.ToTable("Actividad", (string)null);
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.ActividadDependencia", b =>
                {
                    b.Property<Guid>("ActividadId")
                        .HasColumnType("uuid")
                        .HasColumnName("FkActividadId");

                    b.Property<Guid>("DependeDeActividadId")
                        .HasColumnType("uuid")
                        .HasColumnName("FkDependeDeActividadId");

                    b.HasKey("ActividadId", "DependeDeActividadId");

                    b.HasIndex("DependeDeActividadId");

                    b.ToTable("ActividadDependencia", (string)null);
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.Ceo", b =>
                {
                    b.Property<Guid>("CeoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PkCeoId");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("FkUsuarioId");

                    b.HasKey("CeoId")
                        .HasName("PKCeoId");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Ceo", (string)null);
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.Codigo", b =>
                {
                    b.Property<Guid>("CodigoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PkCodigoId");

                    b.Property<DateTime>("Creado")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expiracion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Revocado")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Usado")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("FkUsuarioId");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CodigoId")
                        .HasName("PKCodigoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Codigo", (string)null);
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.Comentario", b =>
                {
                    b.Property<Guid>("ComentarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PkComentarioId");

                    b.Property<string>("Adjunto")
                        .HasColumnType("text");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TareaId")
                        .HasColumnType("uuid")
                        .HasColumnName("FkTareaId");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("FkUsuarioId");

                    b.HasKey("ComentarioId")
                        .HasName("PKComentarioId");

                    b.HasIndex("TareaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Comentario", (string)null);
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.Empleado", b =>
                {
                    b.Property<Guid>("EmpleadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PkEmpleadoId");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("FkUsuarioId");

                    b.HasKey("EmpleadoId")
                        .HasName("PKEmpleadoId");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Empleado", (string)null);
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.EmpleadoProyectoRol", b =>
                {
                    b.Property<Guid>("EmpleadoId")
                        .HasColumnType("uuid")
                        .HasColumnName("FkEmpleadoId");

                    b.Property<Guid>("ProyectoId")
                        .HasColumnType("uuid")
                        .HasColumnName("FkProyectoId");

                    b.Property<Guid>("RolProyectoId")
                        .HasColumnType("uuid")
                        .HasColumnName("FkRolProyectoId");

                    b.HasKey("EmpleadoId", "ProyectoId");

                    b.HasIndex("ProyectoId");

                    b.HasIndex("RolProyectoId");

                    b.ToTable("EmpleadoProyectoRol", (string)null);
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.Empresa", b =>
                {
                    b.Property<Guid>("EmpresaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PkEmpresaId");

                    b.Property<Guid?>("CeoId")
                        .HasColumnType("uuid")
                        .HasColumnName("FkCeoId");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<Guid>("EmpleadoId")
                        .HasColumnType("uuid")
                        .HasColumnName("FkEmpleadoId");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("EmpresaId")
                        .HasName("PKEmpresaId");

                    b.HasIndex("CeoId");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("Empresa", (string)null);
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.Notificacion", b =>
                {
                    b.Property<Guid>("NotificacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PkNotificacionId");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Leida")
                        .HasColumnType("boolean");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TareaId")
                        .HasColumnType("uuid")
                        .HasColumnName("FkTareaId");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("FkUsuarioId");

                    b.HasKey("NotificacionId")
                        .HasName("PKNotificacionId");

                    b.HasIndex("TareaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Notificacion", (string)null);
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.Proyecto", b =>
                {
                    b.Property<Guid>("ProyectoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PkProyectoId");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<Guid>("EmpresaId")
                        .HasColumnType("uuid")
                        .HasColumnName("FkEmpresaId");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("ProyectoId")
                        .HasName("PKProyectoId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Proyecto", (string)null);
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.RolProyecto", b =>
                {
                    b.Property<Guid>("RolProyectoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PkRolProyectoId");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("RolProyectoId")
                        .HasName("PKRolProyectoId");

                    b.ToTable("RolProyecto", (string)null);
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.Tarea", b =>
                {
                    b.Property<Guid>("TareaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PkTareaId");

                    b.Property<Guid>("ActividadId")
                        .HasColumnType("uuid")
                        .HasColumnName("FkActividadId");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaCompletada")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreado")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProyectoId")
                        .HasColumnType("uuid")
                        .HasColumnName("FkProyectoId");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("TareaId")
                        .HasName("PKTareaId");

                    b.HasIndex("ActividadId");

                    b.HasIndex("ProyectoId");

                    b.ToTable("Tarea", (string)null);
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.TareaDependencia", b =>
                {
                    b.Property<Guid>("TareaId")
                        .HasColumnType("uuid")
                        .HasColumnName("FkTareaId");

                    b.Property<Guid>("DependeDeId")
                        .HasColumnType("uuid")
                        .HasColumnName("FkDependeDeId");

                    b.HasKey("TareaId", "DependeDeId");

                    b.HasIndex("DependeDeId");

                    b.ToTable("TareaDependencia", (string)null);
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.TareaUsuario", b =>
                {
                    b.Property<Guid>("TareaId")
                        .HasColumnType("uuid")
                        .HasColumnName("FkTareaId");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid")
                        .HasColumnName("FkUsuarioId");

                    b.HasKey("TareaId", "UsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("TareaUsuario", (string)null);
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.Usuario", b =>
                {
                    b.Property<Guid>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PkUsuarioId");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<bool>("CuentaConfirmada")
                        .HasColumnType("boolean");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FotoPerfil")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NombreUsuario")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("UsuarioId")
                        .HasName("PKUsuarioId");

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.ActividadDependencia", b =>
                {
                    b.HasOne("Boardly.Dominio.Modelos.Actividad", "Actividad")
                        .WithMany("Dependencias")
                        .HasForeignKey("ActividadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Boardly.Dominio.Modelos.Actividad", "DependeDeActividad")
                        .WithMany("Dependientes")
                        .HasForeignKey("DependeDeActividadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actividad");

                    b.Navigation("DependeDeActividad");
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.Ceo", b =>
                {
                    b.HasOne("Boardly.Dominio.Modelos.Usuario", "Usuario")
                        .WithOne("Ceo")
                        .HasForeignKey("Boardly.Dominio.Modelos.Ceo", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.Codigo", b =>
                {
                    b.HasOne("Boardly.Dominio.Modelos.Usuario", "Usuario")
                        .WithMany("Codigos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.Comentario", b =>
                {
                    b.HasOne("Boardly.Dominio.Modelos.Tarea", "Tarea")
                        .WithMany("Comentarios")
                        .HasForeignKey("TareaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Boardly.Dominio.Modelos.Usuario", "Usuario")
                        .WithMany("Comentarios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tarea");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.Empleado", b =>
                {
                    b.HasOne("Boardly.Dominio.Modelos.Usuario", "Usuario")
                        .WithOne("Empleado")
                        .HasForeignKey("Boardly.Dominio.Modelos.Empleado", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.EmpleadoProyectoRol", b =>
                {
                    b.HasOne("Boardly.Dominio.Modelos.Empleado", "Empleado")
                        .WithMany("EmpleadosProyectoRol")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Boardly.Dominio.Modelos.Proyecto", "Proyecto")
                        .WithMany("EmpleadosProyectoRol")
                        .HasForeignKey("ProyectoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Boardly.Dominio.Modelos.RolProyecto", "RolProyecto")
                        .WithMany("EmpleadosProyectoRol")
                        .HasForeignKey("RolProyectoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");

                    b.Navigation("Proyecto");

                    b.Navigation("RolProyecto");
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.Empresa", b =>
                {
                    b.HasOne("Boardly.Dominio.Modelos.Ceo", "Ceo")
                        .WithMany("Empresas")
                        .HasForeignKey("CeoId");

                    b.HasOne("Boardly.Dominio.Modelos.Empleado", "Empleado")
                        .WithMany()
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ceo");

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.Notificacion", b =>
                {
                    b.HasOne("Boardly.Dominio.Modelos.Tarea", "Tarea")
                        .WithMany("Notificaciones")
                        .HasForeignKey("TareaId");

                    b.HasOne("Boardly.Dominio.Modelos.Usuario", "Usuario")
                        .WithMany("Notificaciones")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tarea");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.Proyecto", b =>
                {
                    b.HasOne("Boardly.Dominio.Modelos.Empresa", "Empresa")
                        .WithMany("Proyectos")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.Tarea", b =>
                {
                    b.HasOne("Boardly.Dominio.Modelos.Actividad", "Actividad")
                        .WithMany("Tareas")
                        .HasForeignKey("ActividadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Boardly.Dominio.Modelos.Proyecto", "Proyecto")
                        .WithMany("Tareas")
                        .HasForeignKey("ProyectoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actividad");

                    b.Navigation("Proyecto");
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.TareaDependencia", b =>
                {
                    b.HasOne("Boardly.Dominio.Modelos.Tarea", "DependeDe")
                        .WithMany("Dependientes")
                        .HasForeignKey("DependeDeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Boardly.Dominio.Modelos.Tarea", "Tarea")
                        .WithMany("Dependencias")
                        .HasForeignKey("TareaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DependeDe");

                    b.Navigation("Tarea");
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.TareaUsuario", b =>
                {
                    b.HasOne("Boardly.Dominio.Modelos.Tarea", "Tarea")
                        .WithMany("TareasUsuario")
                        .HasForeignKey("TareaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Boardly.Dominio.Modelos.Usuario", "Usuario")
                        .WithMany("TareasUsuario")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tarea");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.Actividad", b =>
                {
                    b.Navigation("Dependencias");

                    b.Navigation("Dependientes");

                    b.Navigation("Tareas");
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.Ceo", b =>
                {
                    b.Navigation("Empresas");
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.Empleado", b =>
                {
                    b.Navigation("EmpleadosProyectoRol");
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.Empresa", b =>
                {
                    b.Navigation("Proyectos");
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.Proyecto", b =>
                {
                    b.Navigation("EmpleadosProyectoRol");

                    b.Navigation("Tareas");
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.RolProyecto", b =>
                {
                    b.Navigation("EmpleadosProyectoRol");
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.Tarea", b =>
                {
                    b.Navigation("Comentarios");

                    b.Navigation("Dependencias");

                    b.Navigation("Dependientes");

                    b.Navigation("Notificaciones");

                    b.Navigation("TareasUsuario");
                });

            modelBuilder.Entity("Boardly.Dominio.Modelos.Usuario", b =>
                {
                    b.Navigation("Ceo");

                    b.Navigation("Codigos");

                    b.Navigation("Comentarios");

                    b.Navigation("Empleado");

                    b.Navigation("Notificaciones");

                    b.Navigation("TareasUsuario");
                });
#pragma warning restore 612, 618
        }
    }
}
